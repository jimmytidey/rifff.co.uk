package {  import com.adobe.serialization.json.JSON;  import flash.net.URLRequest;  import flash.net.URLLoader;  import flash.net.URLVariables;  import flash.net.URLRequestMethod;  import flash.events.*;  import flash.display.*;   import flash.text.*;     //this object as a container for everything. Has to extend movieclip to inherit the stage obejct  public class RandomSeedComposer extends MovieClip {        var _stage:Stage; // have to define this to pass the stage object around, how fucking stupid is that?        //holding all the date from reading the json    var jsonData:Object; //holds all the json data    var sounds:Array; // array for sound objects for each bank option     var filelist:Array;     public var volumeArray:Array = new Array();    var samples;    var allSounds;    var loader:URLLoader = new URLLoader();    var requester:URLRequest = new URLRequest();        //control objects     var selectSteps:SelectSteps = new SelectSteps();    var calculateGrid:CalculateGrid = new CalculateGrid();    var soundObjects:SoundObjects = new SoundObjects();    var audioDropDown:AudioDropDown = new AudioDropDown();     var modifyStructure:ModifyStructure = new ModifyStructure();     var addControls:AddControls= new AddControls();    var globalSettings:GlobalSettings = new GlobalSettings();    var playBackObjects:PlayBackObjects = new PlayBackObjects();    var transport:Transport = new Transport();    var render:Render = new Render();    var saveJson:SaveJson = new SaveJson();    var fileMC:MovieClip  = new MovieClip();    var options_container:MovieClip = new MovieClip;    var parameters:Array = new Array();            var grid_top = 140; //location for the top of all the grid stuff    var grid_left = 320;    public var soundContainer:Object = new Object();    public function RandomSeedComposer(stage:Stage):void {      _stage = stage;    }        public function init() {      while (_stage.numChildren > 0) {_stage.removeChildAt(_stage.numChildren-1);} //clear the stage       loadJSON();    }    function loadJSON() {      var loadContext:LoadContext= new LoadContext();      addChild(loadContext);      if (loadContext.debug() == "false") {         project_info_location = 'projects/'+loadContext.userName()+'/'+loadContext.projectName()+'/list.json';      }             else {         project_info_location = "http://rifff.co.uk/composer/projects/tom/Membadat/list.json";      }            requester.url=project_info_location;      loader.load(requester);      loader.addEventListener(Event.COMPLETE, decodeJSON);      }           function decodeJSON(event:Event) {      jsonData =JSON.decode(loader.data);      this.jsonData = jsonData;      calculateGrid.addEventListener("done", makeSoundObjects);      calculateGrid.buildGrid(jsonData, grid_top, grid_left);    }        function makeSoundObjects(obj) {      parameters['sounds'] = soundObjects.soundContainer;      soundObjects.addEventListener("loaded", addArguments(drawInterface, [parameters]));      soundObjects.make(_stage, calculateGrid.cumulatuive_y_offset, grid_top, grid_left, fileMC);      soundObjects.reloadBtn.addEventListener(MouseEvent.CLICK, reload);    }            function drawInterface(event, parameters) {      calculateGrid.addEventListener("changed", saveData);      globalSettings.addEventListener("changed", saveData);      audioDropDown.addEventListener("changed", saveData);      modifyStructure.addEventListener("save_name", saveName);      modifyStructure.addEventListener("changed", saveData);      addControls.addEventListener("changed", saveData);      addControls.addEventListener("volume_changed", volumeChanged);      transport.addEventListener("randomise", randomise);            processed_grid = selectSteps.renderPlayingSteps(jsonData, calculateGrid.grid, _stage, grid_top, grid_left);      transport.makeTransport(jsonData, volumeArray, processed_grid, parameters['sounds'],  _stage, grid_top, grid_left);      samples = playBackObjects.make(jsonData);       audioDropDown.make(jsonData, parameters.sounds, samples, _stage, grid_top, grid_left, soundObjects.filelist);      modifyStructure.make(jsonData, _stage, grid_top, grid_left);      addControls.make(jsonData, _stage, volumeArray, grid_top, grid_left);      globalSettings.makeSettings(_stage, jsonData);      allSounds = parameters['sounds'];      _stage.addChild(calculateGrid.grid_container);      _stage.addChild(selectSteps.options_container);      _stage.setChildIndex(transport.scrubberContainer, 0);	  _stage.setChildIndex(calculateGrid.grid_container, 1);      _stage.setChildIndex(selectSteps.options_container, 2); 	      }    function saveData(obj) {      saveJson.save(jsonData, _stage);      calculateGrid.removeEventListener("done", makeSoundObjects);      calculateGrid.buildGrid(jsonData, grid_top, grid_left);      addControls.make(jsonData, _stage, volumeArray, grid_top, grid_left);      samples = playBackObjects.make(jsonData);       audioDropDown.make(jsonData, allSounds, samples, _stage, grid_top, grid_left, soundObjects.filelist);      soundObjects.changeHeight(calculateGrid.cumulatuive_y_offset, fileMC, grid_top, grid_left);      modifyStructure.make(jsonData, _stage, grid_top, grid_left);       }        function randomise(obj) {       trace('randomise');       calculateGrid.removeEventListener("done", makeSoundObjects);      calculateGrid.buildGrid(jsonData, grid_top, grid_left);      processed_grid =selectSteps.renderPlayingSteps(jsonData, calculateGrid.grid, _stage, grid_top, grid_left);           transport.makeTransport(jsonData, volumeArray, processed_grid, parameters['sounds'],  _stage, grid_top, grid_left);              }        function reload(obj) {      trace("reload");      soundObjects.removeEventListener("loaded", addArguments);      var parameters:Array = new Array();      parameters['sounds'] = soundObjects.soundContainer;      soundObjects.make(_stage, calculateGrid.cumulatuive_y_offset, grid_top, grid_left, fileMC);    }    function reloadDropDowns (event, parameters) {       audioDropDown.make(jsonData, parameters.sounds, samples, _stage, grid_top, grid_left, soundObjects.filelist);    }        function saveName (event) {      saveJson.save(jsonData, _stage);    }        function volumeChanged(obj) {      var bank_index= 0;      for each (var bank:Object in jsonData['banks']) {        var bank_option_index= 0;        for each (var bank_option:Object in bank['bank_options']) {          if (jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound']) {            jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sound'].soundTransform = volumeArray[bank_index][bank_option_index];          }          bank_option_index++;        }        bank_index++;       }      saveJson.save(jsonData, _stage);    }                  //some weird utility function     function addArguments(method:Function, additionalArguments:Array):Function {      return function(event:Event):void {method.apply(null, [event].concat(additionalArguments));}          }          }}